<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FoodProject</name>
    </assembly>
    <members>
        <member name="M:FoodProject.App_Start.NinjectWebCommon.Start">
            <summary>
            Starts the application
            </summary>
        </member>
        <member name="M:FoodProject.App_Start.NinjectWebCommon.Stop">
            <summary>
            Stops the application.
            </summary>
        </member>
        <member name="M:FoodProject.App_Start.NinjectWebCommon.CreateKernel">
            <summary>
            Creates the kernel that will manage your application.
            </summary>
            <returns>The created kernel.</returns>
        </member>
        <member name="M:FoodProject.App_Start.NinjectWebCommon.RegisterServices(Ninject.IKernel)">
            <summary>
            Load your modules or register your services here!
            </summary>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="T:FoodProject.Controllers.FoodController">
            <summary>
            food controller handles the viewing/editing of food
            </summary>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.Index(FoodProject.Models.User,System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            the defualt view for the food controller if the user isn't logged in it redirects to login
            if the user is logged in it displays a view that shows all of the users foods, and gives option to add more
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <param name="sortOrder"></param>
            <param name="currentFilter"></param>
            <param name="searchString"></param>
            <param name="page"></param>
            <returns>View of the login screen if not logged in, if logged it returns view of foods</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.addFood">
            <summary>
            this method is called to bring up the view that lets the user add a food to their pantry
            </summary>
            <returns>a view to add food</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.addFoods(FoodProject.Models.User,System.Int32)">
            <summary>
            this method adds the food the user selected from the addFood method to the user's pantry
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <param name="id">the id of the food to add to the pantry</param>
            <returns>a view of the updated food list</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.delete(System.Int32)">
            <summary>
            this method deletes food out of the user's pantry
            </summary>
            <param name="id">the id of the food to delete</param>
            <returns>a view of the updated food list</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.update(System.Int32)">
            <summary>
            this method updates the amount of a food item the user has
            </summary>
            <param name="id">is the id of the food to update</param>
            <returns>a view that lets the user update the food item</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.update(FoodProject.Models.Pantry)">
            <summary>
            this method gets a pantry object from the view in the update method, and actually updates the pantry list
            </summary>
            <param name="pantry">this pantry object is passed to the method through the update view</param>
            <returns></returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.addFoodSearch">
            <summary>
            this method handles when a users searches for food
            </summary>
            <returns>a view with an updated list of foods similar to the search term</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.createNewFood">
            <summary>
            this method returns a view that lets the user create a new food
            </summary>
            <returns>a view</returns>
        </member>
        <member name="M:FoodProject.Controllers.FoodController.createNewFood(FoodProject.Models.User,FoodProject.Models.Food)">
            <summary>
            this method gets the new food the user created and adds it to the database
            if the food item doesn't already exist
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <param name="f">the food object passed through the createNewFood view</param>
            <returns>a view</returns>
        </member>
        <member name="T:FoodProject.Controllers.HomeController">
            <summary>
            this controller is the starting point of the site
            </summary>
        </member>
        <member name="M:FoodProject.Controllers.HomeController.Index(FoodProject.Models.User)">
            <summary>
            this method brings up the home screen
            and serves a purpose of initializing the User object with model binding
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <returns>a view of the home screen</returns>
        </member>
        <member name="M:FoodProject.Controllers.RecipeController.AddRecipeId(System.Int32)">
            <summary>
            Part 1 to add ingredient entry to table 
            creates session to hold the recipeID of recipe you want to add food to
            </summary>
            <param name="id">from linked recipe object</param>
            <returns>View - list of all foods for Part 2</returns>
        </member>
        <member name="M:FoodProject.Controllers.RecipeController.AddFoodId(System.Int32)">
            <summary>
            Part 2 to add ingredient entry to table 
            uses session ID(part 1) and foodID from view to set ingredient properties, then adds them
            </summary>
            <param name="id">food ID from view linked</param>
            <returns>View back to list</returns>
        </member>
        <member name="M:FoodProject.Controllers.RecipeController.CanIMakeIt(FoodProject.Models.User,System.Int32)">
            <summary>
            Tells user whether they can make the recipe.
            Checks pantry.foodID against ingredient.foodID to see if user has foods requited to make recipe 
            </summary>
            <param name="user">global user id</param>
            <param name="recipeId">from htmlAction linker, recipe ID </param>
            <returns>View displaying "yes" or "no"</returns>
        </member>
        <member name="T:FoodProject.Controllers.UserController">
            <summary>
            The user controller handles logging in / out and handles creating users
            </summary>
        </member>
        <member name="M:FoodProject.Controllers.UserController.#ctor(FoodProject.Abstract.IUserRepository)">
            <summary>
            gets the userRepository from the dependency injection container
            </summary>
            <param name="userRepository">gets pass to the constructor through our dependency injection container</param>
        </member>
        <member name="M:FoodProject.Controllers.UserController.Index(FoodProject.Models.User)">
            <summary>
            This method takes you to the login screen if not logged in
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <returns>a view for the user to login</returns>
        </member>
        <member name="M:FoodProject.Controllers.UserController.Index(FoodProject.Models.User,FoodProject.Models.UserLogin)">
            <summary>
            this is the pos tmethod that gets called after the user submits data on the login screen
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <param name="temp">the object passed for the get index method, it hold sthe user login details</param>
            <returns>a view of the home screen if logged in else, you go back to log in screen</returns>
        </member>
        <member name="M:FoodProject.Controllers.UserController.CreateUser">
            <summary>
            This method brings up the view to create a user
            </summary>
            <returns>a view</returns>
        </member>
        <member name="M:FoodProject.Controllers.UserController.Createuser(FoodProject.Models.User,FoodProject.Models.UserLogin)">
            <summary>
            This methods handles the process of creating the user and adding to the database
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <param name="temp">the user details from the get createUser method</param>
            <returns>a view of the home screen if creation was successful, else back to create screen</returns>
        </member>
        <member name="M:FoodProject.Controllers.UserController.LogOut(FoodProject.Models.User)">
            <summary>
            Handles logging out the user, sets all attributes to null
            </summary>
            <param name="user">The object that holds the logged in user, you don't need to pass this in
            it is model binded and passed for you</param>
            <returns>A view of the home screen</returns>
        </member>
        <member name="T:FoodProject.infrastructure.NinjectDependencyResolver">
            <summary>
            the dependency injection contianer, it uses constructor injection
            </summary>
        </member>
        <member name="M:FoodProject.infrastructure.NinjectDependencyResolver.AddBindings">
            <summary>
            This method adds the bindings to the interfaces we created
            if you wanted to change what the concrete implmentiaon the interface will refer to
            you edit this method
            </summary>
        </member>
    </members>
</doc>
